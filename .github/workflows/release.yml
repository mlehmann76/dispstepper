name: Release

on:
  push:
    tags:
      - '*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: fiam/arm-none-eabi-gcc@v1
      with:
          release: '10-2020-q4' # The arm-none-eabi-gcc release to use.

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/firmware/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/firmware/cmake/gcc-arm-none-eabi.cmake ${{github.workspace}}/firmware/

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/firmware/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/firmware/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
    
    - name: Bin2UF
      working-directory: ${{github.workspace}}/firmware/build
      run: node ../scripts/bin2uf2.js dispstepper.bin dispstepper.uf2
    
    - name: Get the version
      id: get_version
      uses: battila7/get-version-action@v2
      
    - name: Rename
      working-directory: ${{github.workspace}}/firmware/build
      run: mv -v dispstepper.bin dispstepper_${{ steps.get_version.outputs.version }}.bin && 
           mv -v dispstepper.hex dispstepper_${{ steps.get_version.outputs.version }}.hex &&
           mv -v dispstepper.uf2 dispstepper_${{ steps.get_version.outputs.version }}.uf2
      
    - name: "Pre Release"
      uses: softprops/action-gh-release@v1
      with:
          files: |
            ${{github.workspace}}/firmware/build/dispstepper_${{ steps.get_version.outputs.version }}.bin
            ${{github.workspace}}/firmware/build/dispstepper_${{ steps.get_version.outputs.version }}.hex
            ${{github.workspace}}/firmware/build/dispstepper_${{ steps.get_version.outputs.version }}.uf2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
